% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/00roxygen.R, R/distributions.R
\name{Distributions}
\alias{Distributions}
\alias{dexp,ad,ad.,logical.-method}
\alias{dexp,num,num.,logical.-method}
\alias{dweibull,ad,ad,ad.,logical.-method}
\alias{dweibull,num,num,num.,logical.-method}
\alias{dbinom,ad,ad,ad,logical.-method}
\alias{dbinom,num,num,num,logical.-method}
\alias{dbeta,ad,ad,ad,missing,logical.-method}
\alias{dbeta,num,num,num,missing,logical.-method}
\alias{df,ad,ad,ad,missing,logical.-method}
\alias{df,num,num,num,missing,logical.-method}
\alias{dlogis,ad,ad.,ad.,logical.-method}
\alias{dlogis,num,num.,num.,logical.-method}
\alias{dt,ad,ad,missing,logical.-method}
\alias{dt,num,num,missing,logical.-method}
\alias{dnbinom,ad,ad,ad,missing,logical.-method}
\alias{dnbinom,num,num,num,missing,logical.-method}
\alias{dpois,ad,ad,logical.-method}
\alias{dpois,num,num,logical.-method}
\alias{dgamma,ad,ad,missing,ad.,logical.-method}
\alias{dgamma,num,num,missing,num.,logical.-method}
\alias{pnorm,ad,ad.,ad.,missing,missing-method}
\alias{pnorm,num,num.,num.,missing,missing-method}
\alias{pgamma,ad,ad,missing,ad.,missing,missing-method}
\alias{pgamma,num,num,missing,num.,missing,missing-method}
\alias{ppois,ad,ad,missing,missing-method}
\alias{ppois,num,num,missing,missing-method}
\alias{pexp,ad,ad.,missing,missing-method}
\alias{pexp,num,num.,missing,missing-method}
\alias{pweibull,ad,ad,ad.,missing,missing-method}
\alias{pweibull,num,num,num.,missing,missing-method}
\alias{pbeta,ad,ad,ad,missing,missing,missing-method}
\alias{pbeta,num,num,num,missing,missing,missing-method}
\title{Distributions and special functions for which AD is implemented}
\usage{
\S4method{dexp}{ad,ad.,logical.}(x, rate = 1, log = FALSE)

\S4method{dexp}{num,num.,logical.}(x, rate = 1, log = FALSE)

\S4method{dweibull}{ad,ad,ad.,logical.}(x, shape, scale = 1, log = FALSE)

\S4method{dweibull}{num,num,num.,logical.}(x, shape, scale = 1, log = FALSE)

\S4method{dbinom}{ad,ad,ad,logical.}(x, size, prob, log = FALSE)

\S4method{dbinom}{num,num,num,logical.}(x, size, prob, log = FALSE)

\S4method{dbeta}{ad,ad,ad,missing,logical.}(x, shape1, shape2, log)

\S4method{dbeta}{num,num,num,missing,logical.}(x, shape1, shape2, log)

\S4method{df}{ad,ad,ad,missing,logical.}(x, df1, df2, log)

\S4method{df}{num,num,num,missing,logical.}(x, df1, df2, log)

\S4method{dlogis}{ad,ad.,ad.,logical.}(x, location = 0, scale = 1, log = FALSE)

\S4method{dlogis}{num,num.,num.,logical.}(x, location = 0, scale = 1, log = FALSE)

\S4method{dt}{ad,ad,missing,logical.}(x, df, log)

\S4method{dt}{num,num,missing,logical.}(x, df, log)

\S4method{dnbinom}{ad,ad,ad,missing,logical.}(x, size, prob, log)

\S4method{dnbinom}{num,num,num,missing,logical.}(x, size, prob, log)

\S4method{dpois}{ad,ad,logical.}(x, lambda, log = FALSE)

\S4method{dpois}{num,num,logical.}(x, lambda, log = FALSE)

\S4method{dgamma}{ad,ad,missing,ad.,logical.}(x, shape, scale, log)

\S4method{dgamma}{num,num,missing,num.,logical.}(x, shape, scale, log)

\S4method{pnorm}{ad,ad.,ad.,missing,missing}(q, mean, sd)

\S4method{pnorm}{num,num.,num.,missing,missing}(q, mean, sd)

\S4method{pgamma}{ad,ad,missing,ad.,missing,missing}(q, shape, scale)

\S4method{pgamma}{num,num,missing,num.,missing,missing}(q, shape, scale)

\S4method{ppois}{ad,ad,missing,missing}(q, lambda)

\S4method{ppois}{num,num,missing,missing}(q, lambda)

\S4method{pexp}{ad,ad.,missing,missing}(q, rate)

\S4method{pexp}{num,num.,missing,missing}(q, rate)

\S4method{pweibull}{ad,ad,ad.,missing,missing}(q, shape, scale)

\S4method{pweibull}{num,num,num.,missing,missing}(q, shape, scale)

\S4method{pbeta}{ad,ad,ad,missing,missing,missing}(q, shape1, shape2)

\S4method{pbeta}{num,num,num,missing,missing,missing}(q, shape1, shape2)
}
\description{
The functions listed in this help page are all applicable for AD types.
Method dispatching follows a simple rule:
\emph{If at least one argument an AD type then a special AD
implementation is selected. In all other cases a default
implementation is used} (typically that of the \bold{stats}
package).
Argument recycling follows the R standard (although wihout any warnings).
}
\section{Functions}{
\itemize{
\item \code{dexp(x = ad, rate = ad., log = logical.)}: AD implementation

\item \code{dexp(x = num, rate = num., log = logical.)}: Default method

\item \code{dweibull(x = ad, shape = ad, scale = ad., log = logical.)}: AD implementation

\item \code{dweibull(x = num, shape = num, scale = num., log = logical.)}: Default method

\item \code{dbinom(x = ad, size = ad, prob = ad, log = logical.)}: AD implementation

\item \code{dbinom(x = num, size = num, prob = num, log = logical.)}: Default method

\item \code{dbeta(x = ad, shape1 = ad, shape2 = ad, ncp = missing, log = logical.)}: AD implementation

\item \code{dbeta(x = num, shape1 = num, shape2 = num, ncp = missing, log = logical.)}: Default method

\item \code{df(x = ad, df1 = ad, df2 = ad, ncp = missing, log = logical.)}: AD implementation

\item \code{df(x = num, df1 = num, df2 = num, ncp = missing, log = logical.)}: Default method

\item \code{dlogis(x = ad, location = ad., scale = ad., log = logical.)}: AD implementation

\item \code{dlogis(x = num, location = num., scale = num., log = logical.)}: Default method

\item \code{dt(x = ad, df = ad, ncp = missing, log = logical.)}: AD implementation

\item \code{dt(x = num, df = num, ncp = missing, log = logical.)}: Default method

\item \code{dnbinom(x = ad, size = ad, prob = ad, mu = missing, log = logical.)}: AD implementation

\item \code{dnbinom(x = num, size = num, prob = num, mu = missing, log = logical.)}: Default method

\item \code{dpois(x = ad, lambda = ad, log = logical.)}: AD implementation

\item \code{dpois(x = num, lambda = num, log = logical.)}: Default method

\item \code{dgamma(x = ad, shape = ad, rate = missing, scale = ad., log = logical.)}: AD implementation

\item \code{dgamma(x = num, shape = num, rate = missing, scale = num., log = logical.)}: Default method

\item \code{pnorm(q = ad, mean = ad., sd = ad., lower.tail = missing, log.p = missing)}: AD implementation

\item \code{pnorm(q = num, mean = num., sd = num., lower.tail = missing, log.p = missing)}: Default method

\item \code{pgamma(
  q = ad,
  shape = ad,
  rate = missing,
  scale = ad.,
  lower.tail = missing,
  log.p = missing
)}: AD implementation

\item \code{pgamma(
  q = num,
  shape = num,
  rate = missing,
  scale = num.,
  lower.tail = missing,
  log.p = missing
)}: Default method

\item \code{ppois(q = ad, lambda = ad, lower.tail = missing, log.p = missing)}: AD implementation

\item \code{ppois(q = num, lambda = num, lower.tail = missing, log.p = missing)}: Default method

\item \code{pexp(q = ad, rate = ad., lower.tail = missing, log.p = missing)}: AD implementation

\item \code{pexp(q = num, rate = num., lower.tail = missing, log.p = missing)}: Default method

\item \code{pweibull(
  q = ad,
  shape = ad,
  scale = ad.,
  lower.tail = missing,
  log.p = missing
)}: AD implementation

\item \code{pweibull(
  q = num,
  shape = num,
  scale = num.,
  lower.tail = missing,
  log.p = missing
)}: Default method

\item \code{pbeta(
  q = ad,
  shape1 = ad,
  shape2 = ad,
  ncp = missing,
  lower.tail = missing,
  log.p = missing
)}: AD implementation

\item \code{pbeta(
  q = num,
  shape1 = num,
  shape2 = num,
  ncp = missing,
  lower.tail = missing,
  log.p = missing
)}: Default method

}}
\examples{
MakeTape( function(x) pnorm(x), x=numeric(5))$jacobian(1:5)
}
