// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>
#include "TMB.h"

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// valid
bool valid(const Rcpp::ComplexVector& x);
RcppExport SEXP _RTMB_valid(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::ComplexVector& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(valid(x));
    return rcpp_result_gen;
END_RCPP
}
// advec
Rcpp::ComplexVector advec(const Rcpp::NumericVector& x);
RcppExport SEXP _RTMB_advec(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(advec(x));
    return rcpp_result_gen;
END_RCPP
}
// dependent
Rcpp::ComplexVector dependent(const Rcpp::ComplexVector& x);
RcppExport SEXP _RTMB_dependent(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::ComplexVector& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(dependent(x));
    return rcpp_result_gen;
END_RCPP
}
// independent
Rcpp::ComplexVector independent(const Rcpp::ComplexVector& x);
RcppExport SEXP _RTMB_independent(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::ComplexVector& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(independent(x));
    return rcpp_result_gen;
END_RCPP
}
// Arith2
Rcpp::ComplexVector Arith2(const Rcpp::ComplexVector& x, const Rcpp::ComplexVector& y, std::string op);
RcppExport SEXP _RTMB_Arith2(SEXP xSEXP, SEXP ySEXP, SEXP opSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::ComplexVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::ComplexVector& >::type y(ySEXP);
    Rcpp::traits::input_parameter< std::string >::type op(opSEXP);
    rcpp_result_gen = Rcpp::wrap(Arith2(x, y, op));
    return rcpp_result_gen;
END_RCPP
}
// Math1
Rcpp::ComplexVector Math1(const Rcpp::ComplexVector& x, std::string op);
RcppExport SEXP _RTMB_Math1(SEXP xSEXP, SEXP opSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::ComplexVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::string >::type op(opSEXP);
    rcpp_result_gen = Rcpp::wrap(Math1(x, op));
    return rcpp_result_gen;
END_RCPP
}
// Reduce1
Rcpp::ComplexVector Reduce1(const Rcpp::ComplexVector& x, std::string op);
RcppExport SEXP _RTMB_Reduce1(SEXP xSEXP, SEXP opSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::ComplexVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::string >::type op(opSEXP);
    rcpp_result_gen = Rcpp::wrap(Reduce1(x, op));
    return rcpp_result_gen;
END_RCPP
}
// getValues
Rcpp::NumericVector getValues(const Rcpp::ComplexVector& x);
RcppExport SEXP _RTMB_getValues(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::ComplexVector& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(getValues(x));
    return rcpp_result_gen;
END_RCPP
}
// getVariables
Rcpp::LogicalVector getVariables(const Rcpp::ComplexVector& x);
RcppExport SEXP _RTMB_getVariables(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::ComplexVector& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(getVariables(x));
    return rcpp_result_gen;
END_RCPP
}
// dbgprint
void dbgprint(const Rcpp::ComplexVector& x);
RcppExport SEXP _RTMB_dbgprint(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::ComplexVector& >::type x(xSEXP);
    dbgprint(x);
    return R_NilValue;
END_RCPP
}
// matmul
Rcpp::ComplexVector matmul(const Rcpp::ComplexMatrix& x, const Rcpp::ComplexMatrix& y, std::string method);
RcppExport SEXP _RTMB_matmul(SEXP xSEXP, SEXP ySEXP, SEXP methodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::ComplexMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::ComplexMatrix& >::type y(ySEXP);
    Rcpp::traits::input_parameter< std::string >::type method(methodSEXP);
    rcpp_result_gen = Rcpp::wrap(matmul(x, y, method));
    return rcpp_result_gen;
END_RCPP
}
// dmvnorm0
Rcpp::ComplexVector dmvnorm0(const Rcpp::ComplexMatrix& x, const Rcpp::ComplexMatrix& s, bool give_log);
RcppExport SEXP _RTMB_dmvnorm0(SEXP xSEXP, SEXP sSEXP, SEXP give_logSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::ComplexMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::ComplexMatrix& >::type s(sSEXP);
    Rcpp::traits::input_parameter< bool >::type give_log(give_logSEXP);
    rcpp_result_gen = Rcpp::wrap(dmvnorm0(x, s, give_log));
    return rcpp_result_gen;
END_RCPP
}
// testSparse
Rcpp::ComplexVector testSparse(const Rcpp::ComplexVector& x);
RcppExport SEXP _RTMB_testSparse(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::ComplexVector& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(testSparse(x));
    return rcpp_result_gen;
END_RCPP
}
// SparseArith2
Rcpp::ComplexVector SparseArith2(const Rcpp::ComplexVector& x, const Rcpp::ComplexVector& y, std::string op);
RcppExport SEXP _RTMB_SparseArith2(SEXP xSEXP, SEXP ySEXP, SEXP opSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::ComplexVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::ComplexVector& >::type y(ySEXP);
    Rcpp::traits::input_parameter< std::string >::type op(opSEXP);
    rcpp_result_gen = Rcpp::wrap(SparseArith2(x, y, op));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP _rcpp_module_boot_mod_adfun();

static const R_CallMethodDef CallEntries[] = {
    TMB_CALLDEFS,
    {"_RTMB_valid", (DL_FUNC) &_RTMB_valid, 1},
    {"_RTMB_advec", (DL_FUNC) &_RTMB_advec, 1},
    {"_RTMB_dependent", (DL_FUNC) &_RTMB_dependent, 1},
    {"_RTMB_independent", (DL_FUNC) &_RTMB_independent, 1},
    {"_RTMB_Arith2", (DL_FUNC) &_RTMB_Arith2, 3},
    {"_RTMB_Math1", (DL_FUNC) &_RTMB_Math1, 2},
    {"_RTMB_Reduce1", (DL_FUNC) &_RTMB_Reduce1, 2},
    {"_RTMB_getValues", (DL_FUNC) &_RTMB_getValues, 1},
    {"_RTMB_getVariables", (DL_FUNC) &_RTMB_getVariables, 1},
    {"_RTMB_dbgprint", (DL_FUNC) &_RTMB_dbgprint, 1},
    {"_RTMB_matmul", (DL_FUNC) &_RTMB_matmul, 3},
    {"_RTMB_dmvnorm0", (DL_FUNC) &_RTMB_dmvnorm0, 3},
    {"_RTMB_testSparse", (DL_FUNC) &_RTMB_testSparse, 1},
    {"_RTMB_SparseArith2", (DL_FUNC) &_RTMB_SparseArith2, 3},
    {"_rcpp_module_boot_mod_adfun", (DL_FUNC) &_rcpp_module_boot_mod_adfun, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_RTMB(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
    TMB_CCALLABLES("RTMB");
}
